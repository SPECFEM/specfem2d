
#========================================================================
#
#                   S P E C F E M 2 D  Version 6.1
#                   ------------------------------
#
# Copyright Universite de Pau, CNRS and INRIA, France,
# and Princeton University / California Institute of Technology, USA.
# Contributors: Dimitri Komatitsch, dimitri DOT komatitsch aT univ-pau DOT fr
#               Nicolas Le Goff, nicolas DOT legoff aT univ-pau DOT fr
#               Roland Martin, roland DOT martin aT univ-pau DOT fr
#               Christina Morency, cmorency aT princeton DOT edu
#
# This software is a computer program whose purpose is to solve
# the two-dimensional viscoelastic anisotropic or poroelastic wave equation
# using a spectral-element method (SEM).
#
# This software is governed by the CeCILL license under French law and
# abiding by the rules of distribution of free software. You can use,
# modify and/or redistribute the software under the terms of the CeCILL
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty and the software's author, the holder of the
# economic rights, and the successive licensors have only limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading, using, modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean that it is complicated to manipulate, and that also
# therefore means that it is reserved for developers and experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and, more generally, to use and operate it in the
# same conditions as regards security.
#
# The full text of the license is available in file "LICENSE".
#
#========================================================================

SHELL=/bin/sh


# uncomment this to generate ParaVer traces on MareNostrum in Barcelona
#MPITRACE_HOME = /gpfs/apps/CEPBATOOLS/mpitrace-devel/64
#PAPI_HOME = /gpfs/apps/PAPI/3.2.1-970mp/64
#PERFCTR_HOME  = /gpfs/apps/PAPI/papi-3.2.1-970mp/64

O = obj


# @configure_input@

FC = @FC@
FCFLAGS = #@FCFLAGS@
MPIFC = @MPIFC@
MPILIBS = @MPILIBS@
FLAGS_CHECK = @FLAGS_CHECK@
FLAGS_NO_CHECK = @FLAGS_NO_CHECK@
FCFLAGS_f90 = @FCFLAGS_f90@


CC = @CC@
CFLAGS = @CFLAGS@ $(CPPFLAGS)
CPPFLAGS = @CPPFLAGS@ $(COND_MPI_CPPFLAGS)

AR = ar
ARFLAGS = cru
RANLIB = ranlib

## serial or parallel
@COND_MPI_TRUE@F90 = $(MPIFC) -DUSE_MPI -DUSE_SCOTCH -I"@SCOTCH_INCLUDEDIR@"
@COND_MPI_FALSE@F90 = $(FC)

## scotch libraries
@COND_MPI_TRUE@LIB = -L"@SCOTCH_LIBDIR@" -lscotch -lscotcherr
@COND_MPI_FALSE@LIB =

# optional: uncomment this to use more than one processor core, in which case the SCOTCH graph partitioner is needed
#LIB = scotch_5.1.10b/lib/libscotch.a scotch_5.1.10b/lib/libscotcherr.a

LINK = $(F90)

##.PHONY: clean default all backup bak generate_databases specfem3D meshfem3D

####
#### targets
####

# default targets for the pure Fortran version
@COND_PYRE_FALSE@DEFAULT = \
@COND_PYRE_FALSE@	meshfem2D \
@COND_PYRE_FALSE@	specfem2D \
@COND_PYRE_FALSE@	convolve_source_timefunction \
@COND_PYRE_FALSE@	check_quality_external_mesh \
@COND_PYRE_FALSE@	$(EMPTY_MACRO)



OBJS_MESHFEM2D = $O/part_unstruct.o \
	$O/meshfem2D.o \
	$O/read_value_parameters.o \
	$O/spline_routines.o

OBJS_SPECFEM2D = $O/checkgrid.o \
	$O/datim.o \
	$O/enforce_acoustic_free_surface.o \
	$O/compute_forces_acoustic.o \
	$O/compute_forces_viscoelastic.o \
	$O/compute_forces_poro_solid.o \
	$O/compute_forces_poro_fluid.o \
	$O/get_poroelastic_velocities.o \
	$O/lagrange_poly.o \
	$O/gmat01.o \
	$O/gll_library.o \
	$O/plotgll.o \
	$O/define_derivation_matrices.o \
	$O/plotpost.o \
	$O/locate_receivers.o \
	$O/locate_source_force.o \
	$O/compute_gradient_attenuation.o \
	$O/setup_sources_receivers.o \
	$O/specfem2D.o \
	$O/write_seismograms.o \
	$O/define_external_model.o \
	$O/createnum_fast.o \
	$O/createnum_slow.o \
	$O/define_shape_functions.o \
	$O/attenuation_model.o \
	$O/create_color_image.o \
	$O/compute_vector_field.o \
	$O/compute_pressure.o \
	$O/recompute_jacobian.o \
	$O/compute_arrays_source.o \
	$O/locate_source_moment_tensor.o \
	$O/netlib_specfun_erf.o \
	$O/construct_acoustic_surface.o \
	$O/assemble_MPI.o \
	$O/compute_energy.o \
	$O/compute_curl_one_element.o \
	$O/attenuation_compute_param.o \
	$O/compute_Bielak_conditions.o \
	$O/paco_beyond_critical.o \
	$O/paco_convolve_fft.o \
	$O/is_in_convex_quadrilateral.o \
	$O/get_perm_cuthill_mckee.o \
	$O/read_external_model.o \
	$O/invert_mass_matrix.o \
	$O/calendar.o \
	$O/convert_time.o



default: scotch $(DEFAULT)

all: default

required: obj

mesh : meshfem2D
spec : specfem2D
specfem2D: xspecfem2D
meshfem2D: xmeshfem2D
convolve_source_timefunction: xconvolve_source_timefunction
check_quality_external_mesh: xcheck_quality_external_mesh

bin:
	mkdir -p bin

obj:
	mkdir -p obj

scotch:
ifeq (@USE_BUNDLED_SCOTCH@,1)
	(echo "Using bundled Scotch")
	(cd "@SCOTCH_DIR@/src"; make)
else
	(echo "Not using bundled Scotch")
endif


clean:
	(rm -rf obj xmeshfem2D xmeshfem2D.trace \
	xspecfem2D xspecfem2D.trace \
	$O/*.o *.o $O/*.il *.mod core \
	xconvolve_source_timefunction \
	xcheck_quality_external_mesh \
	*.oo *.ipo)


help:
	@echo "usage: make [executable]"
	@echo ""
	@echo "supported executables:"
	@echo "    xspecfem3D"
	@echo "    xmeshfem3D"
	@echo "    xconvolve_source_timefunction"
	@echo "    xcheck_quality_external_mesh"
	@echo ""

##
## mesher
##
xmeshfem2D: required $(OBJS_MESHFEM2D)
	$(LINK) $(FLAGS_CHECK) -o xmeshfem2D $(OBJS_MESHFEM2D) $(LIB)

##
## solver
##
### use optimized compilation option for solver only
xspecfem2D: required $(OBJS_SPECFEM2D)
	$(LINK) $(FLAGS_NO_CHECK) -o xspecfem2D $(OBJS_SPECFEM2D)

##
## convolve_source_timefunction
##
xconvolve_source_timefunction: required $O/convolve_source_timefunction.o
	${F90} $(FLAGS_CHECK) -o xconvolve_source_timefunction $O/convolve_source_timefunction.o

##
## check_quality_external_mesh
##
xcheck_quality_external_mesh: required $O/check_quality_external_mesh.o $O/read_value_parameters.o
	${F90} $(FLAGS_CHECK) -o xcheck_quality_external_mesh $O/check_quality_external_mesh.o $O/read_value_parameters.o

$O/checkgrid.o: checkgrid.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/checkgrid.o checkgrid.F90

$O/meshfem2D.o: meshfem2D.F90
	${F90} $(FLAGS_CHECK) -c -o $O/meshfem2D.o meshfem2D.F90

$O/createnum_fast.o: createnum_fast.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/createnum_fast.o createnum_fast.f90

$O/createnum_slow.o: createnum_slow.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/createnum_slow.o createnum_slow.f90

$O/convolve_source_timefunction.o: convolve_source_timefunction.f90
	${F90} $(FLAGS_CHECK) -c -o $O/convolve_source_timefunction.o convolve_source_timefunction.f90

$O/check_quality_external_mesh.o: check_quality_external_mesh.f90
	${F90} $(FLAGS_CHECK) -c -o $O/check_quality_external_mesh.o check_quality_external_mesh.f90

$O/read_value_parameters.o: read_value_parameters.f90
	${F90} $(FLAGS_CHECK) -c -o $O/read_value_parameters.o read_value_parameters.f90

$O/datim.o: datim.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/datim.o datim.f90

$O/lagrange_poly.o: lagrange_poly.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/lagrange_poly.o lagrange_poly.f90

$O/gmat01.o: gmat01.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/gmat01.o gmat01.f90

$O/gll_library.o: gll_library.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/gll_library.o gll_library.f90

$O/define_derivation_matrices.o: define_derivation_matrices.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/define_derivation_matrices.o define_derivation_matrices.f90

$O/plotgll.o: plotgll.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/plotgll.o plotgll.f90

$O/plotpost.o: plotpost.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/plotpost.o plotpost.F90

$O/locate_receivers.o: locate_receivers.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/locate_receivers.o locate_receivers.F90

$O/recompute_jacobian.o: recompute_jacobian.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/recompute_jacobian.o recompute_jacobian.f90

$O/locate_source_force.o: locate_source_force.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/locate_source_force.o locate_source_force.F90

$O/locate_source_moment_tensor.o: locate_source_moment_tensor.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/locate_source_moment_tensor.o locate_source_moment_tensor.F90

$O/define_shape_functions.o: define_shape_functions.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/define_shape_functions.o define_shape_functions.f90

$O/attenuation_model.o: attenuation_model.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/attenuation_model.o attenuation_model.f90

$O/get_poroelastic_velocities.o: get_poroelastic_velocities.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/get_poroelastic_velocities.o get_poroelastic_velocities.f90

### use optimized compilation option for solver only
$O/specfem2D.o: specfem2D.F90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/specfem2D.o specfem2D.F90

### use optimized compilation option for solver only
$O/enforce_acoustic_free_surface.o: enforce_acoustic_free_surface.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/enforce_acoustic_free_surface.o enforce_acoustic_free_surface.f90

### use optimized compilation option for solver only
$O/compute_forces_acoustic.o: compute_forces_acoustic.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_forces_acoustic.o compute_forces_acoustic.f90

### use optimized compilation option for solver only
$O/compute_forces_viscoelastic.o: compute_forces_viscoelastic.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_forces_viscoelastic.o compute_forces_viscoelastic.f90

### use optimized compilation option for solver only
$O/compute_forces_poro_solid.o: compute_forces_poro_solid.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_forces_poro_solid.o compute_forces_poro_solid.f90

### use optimized compilation option for solver only
$O/compute_forces_poro_fluid.o: compute_forces_poro_fluid.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_forces_poro_fluid.o compute_forces_poro_fluid.f90

### use optimized compilation option for solver only
$O/compute_gradient_attenuation.o: compute_gradient_attenuation.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_gradient_attenuation.o compute_gradient_attenuation.f90

$O/calendar.o: calendar.f90
	${F90} $(FLAGS_CHECK) -c -o $O/calendar.o calendar.f90

$O/convert_time.o: convert_time.f90
	${F90} $(FLAGS_CHECK) -c -o $O/convert_time.o convert_time.f90

$O/compute_energy.o: compute_energy.f90 constants.h
	${F90} $(FLAGS_NO_CHECK) -c -o $O/compute_energy.o compute_energy.f90

$O/compute_vector_field.o: compute_vector_field.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/compute_vector_field.o compute_vector_field.f90

$O/compute_pressure.o: compute_pressure.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/compute_pressure.o compute_pressure.f90

$O/compute_curl_one_element.o: compute_curl_one_element.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/compute_curl_one_element.o compute_curl_one_element.f90

$O/compute_Bielak_conditions.o: compute_Bielak_conditions.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/compute_Bielak_conditions.o compute_Bielak_conditions.f90

$O/compute_arrays_source.o: compute_arrays_source.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/compute_arrays_source.o compute_arrays_source.f90

$O/create_color_image.o: create_color_image.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/create_color_image.o create_color_image.f90

$O/spline_routines.o: spline_routines.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/spline_routines.o spline_routines.f90

$O/netlib_specfun_erf.o: netlib_specfun_erf.f90
	${F90} $(FLAGS_CHECK) -c -o $O/netlib_specfun_erf.o netlib_specfun_erf.f90

$O/define_external_model.o: define_external_model.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/define_external_model.o define_external_model.f90

$O/write_seismograms.o: write_seismograms.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/write_seismograms.o write_seismograms.F90

$O/part_unstruct.o: part_unstruct.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/part_unstruct.o part_unstruct.F90

$O/construct_acoustic_surface.o: construct_acoustic_surface.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/construct_acoustic_surface.o construct_acoustic_surface.f90

$O/assemble_MPI.o: assemble_MPI.F90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/assemble_MPI.o assemble_MPI.F90

$O/attenuation_compute_param.o: attenuation_compute_param.c
	${CC} -c -o $O/attenuation_compute_param.o attenuation_compute_param.c

$O/paco_beyond_critical.o: paco_beyond_critical.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/paco_beyond_critical.o paco_beyond_critical.f90

$O/paco_convolve_fft.o: paco_convolve_fft.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/paco_convolve_fft.o paco_convolve_fft.f90

$O/is_in_convex_quadrilateral.o: is_in_convex_quadrilateral.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/is_in_convex_quadrilateral.o is_in_convex_quadrilateral.f90

$O/get_perm_cuthill_mckee.o: get_perm_cuthill_mckee.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/get_perm_cuthill_mckee.o get_perm_cuthill_mckee.f90

$O/read_external_model.o: read_external_model.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/read_external_model.o read_external_model.f90

$O/setup_sources_receivers.o: setup_sources_receivers.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/setup_sources_receivers.o setup_sources_receivers.f90

$O/invert_mass_matrix.o: invert_mass_matrix.f90 constants.h
	${F90} $(FLAGS_CHECK) -c -o $O/invert_mass_matrix.o invert_mass_matrix.f90
